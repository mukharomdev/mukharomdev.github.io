1:"$Sreact.fragment"
2:I[7397,[],""]
3:I[8513,[],""]
5:I[3514,[],"OutletBoundary"]
8:I[3514,[],"ViewportBoundary"]
a:I[3514,[],"MetadataBoundary"]
c:I[1612,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/cc1b38a888361ae0.css","style"]
:HL["/_next/static/css/a218dfb468eefcdf.css","style"]
0:{"P":null,"b":"zB4SN0XwAB_SWMRVvwFhG","p":"","c":["","blog","javascript-string-metode"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","javascript-string-metode","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cc1b38a888361ae0.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased ","children":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-100","children":["$","div",null,{"className":"container mx-auto p-4 bg-white rounded-lg shadow-lg","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"$undefined",[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","section",null,{"className":" prose lg:prose-3xl prose-img:rounded-xl prose-headings:underline prose-a:text-lime-600 prose-code:text-lime-500 mx-auto  ","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","javascript-string-metode","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4","$undefined",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a218dfb468eefcdf.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L5",null,{"children":["$L6","$L7",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","6mSEr0rlr-3c_wWDE55WN",{"children":[["$","$L8",null,{"children":"$L9"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$La",null,{"children":"$Lb"}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
d:I[4184,["161","static/chunks/161-e1f62ef38275032d.js","953","static/chunks/app/blog/%5Bslug%5D/page-df444d222e09a7de.js"],""]
e:I[8161,["161","static/chunks/161-e1f62ef38275032d.js","953","static/chunks/app/blog/%5Bslug%5D/page-df444d222e09a7de.js"],"Image"]
f:T2c85c,<p>JavaScript memiliki banyak metode bawaan yang dapat digunakan untuk memanipulasi dan bekerja dengan string. Berikut adalah beberapa metode string yang umum digunakan beserta penjelasan dan contoh penggunaannya:</p>
<h3>1. length</h3>
<p>Mengembalikan panjang string.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.length); // Output: 13
</code></pre>
<h3>2. charAt(index)</h3>
<p>Mengembalikan karakter pada indeks tertentu.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.charAt(1)); // Output: e
</code></pre>
<h3>3. concat(string1, string2, ...)</h3>
<p>Menggabungkan dua atau lebih string.</p>
<pre><code class="language-javascript">let text1 = "Hello";
let text2 = "World";
console.log(text1.concat(" ", text2)); // Output: Hello World
</code></pre>
<h3>4. indexOf(substring)</h3>
<p>Mengembalikan indeks pertama dari substring yang ditemukan, atau -1 jika tidak ditemukan.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.indexOf("World")); // Output: 7
</code></pre>
<h3>5. lastIndexOf(substring)</h3>
<p>Mengembalikan indeks terakhir dari substring yang ditemukan, atau -1 jika tidak ditemukan.</p>
<pre><code class="language-javascript">let text = "Hello, World! World!";
console.log(text.lastIndexOf("World")); // Output: 14
</code></pre>
<h3>6. slice(start, end)</h3>
<p>Mengembalikan bagian dari string mulai dari indeks start hingga end (tidak termasuk end).</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.slice(7, 12)); // Output: World
</code></pre>
<h3>7. substring(start, end)</h3>
<p>Mirip dengan slice, tetapi tidak menerima indeks negatif.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.substring(7, 12)); // Output: World
</code></pre>
<h3>8. substr(start, length)</h3>
<p>Mengembalikan bagian dari string mulai dari indeks start dengan panjang length.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.substr(7, 5)); // Output: World
</code></pre>
<h3>9. replace(searchValue, newValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.replace("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>10. toUpperCase()</h3>
<p>Mengubah string menjadi huruf besar.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.toUpperCase()); // Output: HELLO, WORLD!
</code></pre>
<h3>11. toLowerCase()</h3>
<p>Mengubah string menjadi huruf kecil.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.toLowerCase()); // Output: hello, world!
</code></pre>
<h3>12. trim()</h3>
<p>Menghapus spasi di awal dan akhir string.</p>
<pre><code class="language-javascript">let text = "   Hello, World!   ";
console.log(text.trim()); // Output: Hello, World!
</code></pre>
<h3>13. split(separator)</h3>
<p>Membagi string menjadi array berdasarkan separator.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.split(" ")); // Output: ["Hello,", "World!"]
</code></pre>
<h3>14. includes(substring)</h3>
<p>Mengembalikan true jika string mengandung substring, dan false jika tidak.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.includes("World")); // Output: true
</code></pre>
<h3>15. startsWith(substring)</h3>
<p>Mengembalikan true jika string dimulai dengan substring, dan false jika tidak.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.startsWith("Hello")); // Output: true
</code></pre>
<h3>16. endsWith(substring)</h3>
<p>Mengembalikan true jika string diakhiri dengan substring, dan false jika tidak.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.endsWith("World!")); // Output: true
</code></pre>
<h3>17. repeat(count)</h3>
<p>Mengulang string sebanyak count kali.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.repeat(3)); // Output: HelloHelloHello
</code></pre>
<h3>18. match(regexp)</h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.match(/World/)); // Output: ["World"]
</code></pre>
<h3>19. search(regexp)</h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.search(/World/)); // Output: 7
</code></pre>
<h3>20. padStart(targetLength, padString)</h3>
<p>Menambahkan karakter tertentu di awal string hingga mencapai panjang tertentu.</p>
<pre><code class="language-javascript">let text = "5";
console.log(text.padStart(4, "0")); // Output: 0005
</code></pre>
<h3>21. padEnd(targetLength, padString)</h3>
<p>Menambahkan karakter tertentu di akhir string hingga mencapai panjang tertentu.</p>
<pre><code class="language-javascript">let text = "5";
console.log(text.padEnd(4, "0")); // Output: 5000
</code></pre>
<h3>22. charCodeAt(index)</h3>
<p>Mengembalikan kode Unicode dari karakter pada indeks tertentu.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.charCodeAt(1)); // Output: 101
</code></pre>
<h3>23. fromCharCode(code1, code2, ...)</h3>
<p>Mengembalikan string dari kode Unicode yang diberikan.</p>
<pre><code class="language-javascript">console.log(String.fromCharCode(72, 101, 108, 108, 111)); // Output: Hello
</code></pre>
<h3>24. localeCompare(compareString)</h3>
<p>Membandingkan dua string secara lokal (berdasarkan bahasa).</p>
<pre><code class="language-javascript">let text1 = "apple";
let text2 = "banana";
console.log(text1.localeCompare(text2)); // Output: -1 (karena "apple" &#x3C; "banana")
</code></pre>
<h3>25. trimStart() dan trimEnd()</h3>
<p>Menghapus spasi di awal (trimStart) atau di akhir (trimEnd) string.</p>
<pre><code class="language-javascript">let text = "   Hello, World!   ";
console.log(text.trimStart()); // Output: "Hello, World!   "
console.log(text.trimEnd());   // Output: "   Hello, World!"
</code></pre>
<h3>26. toLocaleLowerCase() dan toLocaleUpperCase()</h3>
<p>Mengubah string menjadi huruf kecil atau besar berdasarkan lokal.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.toLocaleLowerCase()); // Output: hello, world!
console.log(text.toLocaleUpperCase()); // Output: HELLO, WORLD!
</code></pre>
<h3>27. normalize(form)</h3>
<p>Mengembalikan bentuk normalisasi Unicode dari string.</p>
<pre><code class="language-javascript">let text = "Å";
console.log(text.normalize("NFD")); // Output: Å
</code></pre>
<h3>28. codePointAt(pos)</h3>
<p>Mengembalikan kode titik Unicode dari karakter pada posisi tertentu.</p>
<pre><code class="language-javascript">let text = "😊";
console.log(text.codePointAt(0)); // Output: 128522
</code></pre>
<h3>29. includes(searchString, position)</h3>
<p>Mengembalikan true jika string mengandung searchString mulai dari posisi tertentu.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.includes("World", 8)); // Output: false
</code></pre>
<h3>30. startsWith(searchString, position) dan endsWith(searchString, length)</h3>
<p>Mengembalikan true jika string dimulai atau diakhiri dengan searchString mulai dari posisi tertentu.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.startsWith("World", 7)); // Output: true
console.log(text.endsWith("Hello", 5));   // Output: true
</code></pre>
<h3>31. repeat(count)</h3>
<p>Mengulang string sebanyak count kali.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.repeat(3)); // Output: HelloHelloHello
</code></pre>
<h3>32. matchAll(regexp)</h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text.matchAll(regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>33. replaceAll(searchValue, replaceValue)</h3>
<p>Mengganti semua kemunculan searchValue dengan replaceValue.</p>
<pre><code class="language-javascript">let text = "Hello, World! World!";
console.log(text.replaceAll("World", "JavaScript")); // Output: Hello, JavaScript! JavaScript!
</code></pre>
<h3>34. at(index)</h3>
<p>Mengembalikan karakter pada indeks tertentu, mendukung indeks negatif.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.at(-1)); // Output: !
</code></pre>
<h3>35. String.raw</h3>
<p>Mengembalikan string mentah tanpa memproses escape sequence.</p>
<pre><code class="language-javascript">let path = String.raw`C:\Development\profile\aboutme.html`;
console.log(path); // Output: C:\Development\profile\aboutme.html
</code></pre>
<h3>36. String.fromCodePoint(codePoint1, codePoint2, ...)</h3>
<p>Mengembalikan string dari kode titik Unicode yang diberikan.</p>
<pre><code class="language-javascript">console.log(String.fromCodePoint(9731, 9733, 9842)); // Output: ☃★♲
</code></pre>
<h3>37. String.prototype[Symbol.iterator]</h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
for (let char of text) {
    console.log(char);
}
// Output: H, e, l, l, o
</code></pre>
<h3>38. String.prototype.anchor(name)</h3>
<p>Membuat elemen anchor HTML dengan nama tertentu.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.anchor("myAnchor")); // Output: &#x3C;a name="myAnchor">Hello&#x3C;/a>
</code></pre>
<h3>39. String.prototype.big()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.big()); // Output: &#x3C;big>Hello&#x3C;/big>
</code></pre>
<h3>40. String.prototype.blink()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.blink()); // Output: &#x3C;blink>Hello&#x3C;/blink>
</code></pre>
<h3>41. String.prototype.bold()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.bold()); // Output: &#x3C;b>Hello&#x3C;/b>
</code></pre>
<h3>42. String.prototype.fixed()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.fixed()); // Output: &#x3C;tt>Hello&#x3C;/tt>
</code></pre>
<h3>43. String.prototype.fontcolor(color)</h3>
<p>Membuat elemen  HTML dengan warna tertentu.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.fontcolor("red")); // Output: &#x3C;font color="red">Hello&#x3C;/font>
</code></pre>
<h3>44. String.prototype.fontsize(size)</h3>
<p>Membuat elemen  HTML dengan ukuran tertentu.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.fontsize(5)); // Output: &#x3C;font size="5">Hello&#x3C;/font>
</code></pre>
<h3>45. String.prototype.italics()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.italics()); // Output: &#x3C;i>Hello&#x3C;/i>
</code></pre>
<h3>46. String.prototype.link(url)</h3>
<p>Membuat elemen  HTML dengan URL tertentu.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.link("https://example.com")); // Output: &#x3C;a href="https://example.com">Hello&#x3C;/a>
</code></pre>
<h3>47. String.prototype.small()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.small()); // Output: &#x3C;small>Hello&#x3C;/small>
</code></pre>
<h3>48. String.prototype.strike()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.strike()); // Output: &#x3C;strike>Hello&#x3C;/strike>
</code></pre>
<h3>49. String.prototype.sub()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.sub()); // Output: &#x3C;sub>Hello&#x3C;/sub>
</code></pre>
<h3>50. String.prototype.sup()</h3>
<p>Membuat elemen  HTML.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.sup()); // Output: &#x3C;sup>Hello&#x3C;/sup>
</code></pre>
<h3>51. String.prototype.toString()</h3>
<p>Mengembalikan string itu sendiri.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text.toString()); // Output: Hello
</code></pre>
<h3>52. String.prototype.valueOf()</h3>
<p>Mengembalikan nilai primitif dari string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text.valueOf()); // Output: Hello
</code></pre>
<h3>53. String.prototype<a href="">@@iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>54. String.prototype.toWellFormed()</h3>
<p>Mengembalikan string yang telah dinormalisasi ke bentuk yang baik (well-formed).</p>
<pre><code class="language-javascript">let text = "Hello\uD800World";
console.log(text.toWellFormed()); // Output: Hello�World
</code></pre>
<h3>55. String.prototype.isWellFormed()</h3>
<p>Mengembalikan true jika string dalam bentuk yang baik (well-formed), dan false jika tidak.</p>
<pre><code class="language-javascript">let text = "Hello\uD800World";
console.log(text.isWellFormed()); // Output: false
</code></pre>
<h3>56. String.prototype.toLocaleLowerCase([locale, locale, ...])</h3>
<p>Mengubah string menjadi huruf kecil berdasarkan lokal tertentu.</p>
<pre><code class="language-javascript">let text = "HELLO, WORLD!";
console.log(text.toLocaleLowerCase('tr')); // Output: hello, world!
</code></pre>
<h3>57. String.prototype.toLocaleUpperCase([locale, locale, ...])</h3>
<p>Mengubah string menjadi huruf besar berdasarkan lokal tertentu.</p>
<pre><code class="language-javascript">let text = "hello, world!";
console.log(text.toLocaleUpperCase('tr')); // Output: HELLO, WORLD!
</code></pre>
<h3>58. String.prototype.localeCompare(compareString, locales, options)</h3>
<p>Membandingkan dua string secara lokal dengan opsi tertentu.</p>
<pre><code class="language-javascript">let text1 = "apple";
let text2 = "banana";
console.log(text1.localeCompare(text2, 'en', { sensitivity: 'base' })); // Output: -1
</code></pre>
<h3>59. String.prototype.normalize([form])</h3>
<p>Mengembalikan bentuk normalisasi Unicode dari string dengan bentuk tertentu.</p>
<pre><code class="language-javascript">let text = "Å";
console.log(text.normalize("NFC")); // Output: Å
</code></pre>
<h3>60. String.prototype.repeat(count)</h3>
<p>Mengulang string sebanyak count kali.</p>
<pre><code class="language-javascript">let text = "Hello";
console.log(text.repeat(3)); // Output: HelloHelloHello
</code></pre>
<h3>61. String.prototype.search(regexp)</h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.search(/World/)); // Output: 7
</code></pre>
<h3>62. String.prototype.split(separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.split(" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>63. String.prototype.substring(start, end)</h3>
<p>Mengembalikan bagian dari string mulai dari indeks start hingga end (tidak termasuk end).</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.substring(7, 12)); // Output: World
</code></pre>
<h3>64. String.prototype.substr(start, length)</h3>
<p>Mengembalikan bagian dari string mulai dari indeks start dengan panjang length.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.substr(7, 5)); // Output: World
</code></pre>
<h3>65. String.prototype.toLowerCase()</h3>
<p>Mengubah string menjadi huruf kecil.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.toLowerCase()); // Output: hello, world!
</code></pre>
<h3>66. String.prototype.toUpperCase()</h3>
<p>Mengubah string menjadi huruf besar.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text.toUpperCase()); // Output: HELLO, WORLD!
</code></pre>
<h3>67. String.prototype.trim()</h3>
<p>Menghapus spasi di awal dan akhir string.</p>
<pre><code class="language-javascript">let text = "   Hello, World!   ";
console.log(text.trim()); // Output: Hello, World!
</code></pre>
<h3>68. String.prototype.trimStart()</h3>
<p>Menghapus spasi di awal string.</p>
<pre><code class="language-javascript">let text = "   Hello, World!   ";
console.log(text.trimStart()); // Output: "Hello, World!   "
</code></pre>
<h3>69. String.prototype.trimEnd()</h3>
<p>Menghapus spasi di akhir string.</p>
<pre><code class="language-javascript">let text = "   Hello, World!   ";
console.log(text.trimEnd()); // Output: "   Hello, World!"
</code></pre>
<h3>70. String.prototype.valueOf()</h3>
<p>Mengembalikan nilai primitif dari string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text.valueOf()); // Output: Hello
</code></pre>
<h3>71. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>72. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>73. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>74. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>75. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>76. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>77. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>78. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>79. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>80. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>81. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>82. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>83. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>84. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>85. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>86. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>87. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>88. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>89. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>90. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>91. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>92. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>93. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>94. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>95. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>96. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>97. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>98. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>99. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>100. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>101. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>102. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>103. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>104. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>105. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>106. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>107. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>108. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>109. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>110. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>111. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>112. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>113. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>114. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>115. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>116. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>117. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>118. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>119. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>120. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>121. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>122. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>123. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>124. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>125. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>126. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>127. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>128. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>129. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>130. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>131. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>132. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>133. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>134. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>135. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>136. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>137. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>138. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>139. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>140. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>141. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>142. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>143. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>144. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>145. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>146. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>147. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>148. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>149. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>150. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>151. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>152. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>153. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>154. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>155. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>156. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>157. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>158. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>159. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>160. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>161. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>162. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>163. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>164. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>165. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>166. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>167. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>168. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>169. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>170. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>171. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>172. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>173. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>174. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>175. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>176. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>177. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>178. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>179. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>180. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>181. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>182. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>183. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>184. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>185. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>186. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>187. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>188. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>189. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>190. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>191. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>192. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>193. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>194. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>195. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>196. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>197. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>198. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>199. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>200. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>201. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>202. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>203. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>204. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>205. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>206. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>207. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>208. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>209. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>210. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>211. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>212. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>213. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>214. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>215. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>216. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>217. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>218. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>219. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>220. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>221. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>222. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>223. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>224. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>225. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>226. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>227. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>228. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>229. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>230. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>231. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>232. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>233. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>234. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>235. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>236. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>237. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>238. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>239. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>240. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>241. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>242. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>243. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>244. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>245. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>246. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>247. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>248. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>249. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>250. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>251. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>252. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>253. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>254. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>255. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>256. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>257. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>258. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>259. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>260. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>261. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>262. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>263. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>264. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>265. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>266. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>267. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>268. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>269. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>270. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>271. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>272. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>273. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>274. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>275. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>276. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>277. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>278. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>279. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>280. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>281. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>282. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>283. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>284. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>285. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>286. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>287. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>288. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>289. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>290. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>291. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>292. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>293. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>294. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>295. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>296. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>297. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>298. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>299. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>300. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>301. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>302. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>303. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>304. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>305. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>306. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>307. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>308. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>309. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>310. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>311. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>312. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>313. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>314. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>315. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>316. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>317. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>318. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>319. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>320. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>321. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>322. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>323. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>324. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>325. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>326. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>327. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>328. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>329. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>330. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>331. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>332. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>333. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>334. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>335. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>336. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>337. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>338. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>339. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>340. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>341. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>342. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>343. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>344. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>345. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>346. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>347. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>348. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>349. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>350. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>351. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>352. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>353. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>354. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>355. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>356. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>357. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>358. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>359. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>360. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>361. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>362. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>363. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>364. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>365. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>366. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>367. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>368. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>369. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>370. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>371. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>372. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>373. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>374. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>375. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>376. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>377. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>378. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>379. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>380. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>381. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>382. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>383. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>384. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>385. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>386. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>387. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>388. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>389. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>390. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>391. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>392. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>393. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>394. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>395. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>396. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>397. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>398. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>399. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>400. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>401. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>402. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>403. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>404. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>405. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>406. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>407. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>408. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>409. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>410. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>411. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>412. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>413. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>414. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>415. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>416. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>417. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>418. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>419. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>420. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>421. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>422. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>423. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>424. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>425. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>426. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>427. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>428. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>429. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>430. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>431. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>432. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>433. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>434. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>435. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>436. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>437. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>438. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>439. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>440. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>441. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>442. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>443. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>444. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>445. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>446. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>447. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>448. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>449. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>450. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>451. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>452. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>453. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>454. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>455. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>456. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>457. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>458. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>459. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>460. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>461. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>462. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>463. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>464. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>465. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>466. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>467. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>468. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>469. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>470. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>471. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>472. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>473. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>474. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>475. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>476. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>477. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>478. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>479. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>480. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>481. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>482. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>483. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>484. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>485. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>486. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>487. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>488. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>489. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>490. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>491. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>492. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>493. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>494. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>495. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>496. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>497. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>498. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>499. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>500. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>501. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>502. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>503. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>504. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>505. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>506. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>507. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>508. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>509. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>510. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>511. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>512. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>513. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>514. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>515. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>516. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>517. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>518. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>519. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>520. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>521. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>522. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>523. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>524. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>525. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>526. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>527. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>528. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>529. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>530. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>531. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>532. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>533. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>534. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>535. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>536. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>537. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>538. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>539. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>540. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>541. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>542. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>543. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>544. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>545. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>546. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>547. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>548. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>549. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>550. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>551. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>552. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>553. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>554. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>555. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>556. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>557. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>558. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>559. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>560. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>561. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>562. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>563. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>564. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>565. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>566. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>567. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>568. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>569. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>570. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>571. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>572. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>573. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>574. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>575. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>576. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>577. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
<h3>578. String.prototype<a href="regexp">Symbol.match</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan hasilnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.match](/World/)); // Output: ["World"]
</code></pre>
<h3>579. String.prototype<a href="regexp">Symbol.matchAll</a></h3>
<p>Mengembalikan semua hasil pencocokan dari ekspresi reguler.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
let regexp = /l/g;
console.log([...text[Symbol.matchAll](regexp)]); // Output: [["l"], ["l"], ["l"]]
</code></pre>
<h3>580. String.prototype[Symbol.replace](searchValue, replaceValue)</h3>
<p>Mengganti substring yang ditemukan dengan string baru.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.replace]("World", "JavaScript")); // Output: Hello, JavaScript!
</code></pre>
<h3>581. String.prototype<a href="regexp">Symbol.search</a></h3>
<p>Mencari string yang cocok dengan ekspresi reguler dan mengembalikan indeksnya.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.search](/World/)); // Output: 7
</code></pre>
<h3>582. String.prototype[Symbol.split](separator, limit)</h3>
<p>Membagi string menjadi array berdasarkan separator dengan batasan jumlah elemen.</p>
<pre><code class="language-javascript">let text = "Hello, World!";
console.log(text[Symbol.split](" ", 1)); // Output: ["Hello,"]
</code></pre>
<h3>583. String.prototype<a href="hint">Symbol.toPrimitive</a></h3>
<p>Mengembalikan nilai primitif dari string berdasarkan petunjuk (hint).</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toPrimitive]("string")); // Output: Hello
</code></pre>
<h3>584. String.prototype[Symbol.toStringTag]</h3>
<p>Mengembalikan tag string yang digunakan untuk membuat objek string.</p>
<pre><code class="language-javascript">let text = new String("Hello");
console.log(text[Symbol.toStringTag]); // Output: String
</code></pre>
<h3>585. String.prototype<a href="">Symbol.iterator</a></h3>
<p>Mengembalikan iterator yang mengiterasi setiap karakter dalam string.</p>
<pre><code class="language-javascript">let text = "Hello";
let iterator = text[Symbol.iterator]();
console.log(iterator.next().value); // Output: H
console.log(iterator.next().value); // Output: e
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: l
console.log(iterator.next().value); // Output: o
</code></pre>
4:["$","main",null,{"className":"container","children":[["$","div",null,{"className":"border-b dark:bg-slate-800 bg-neutral-50 border-neutral-200","children":["$","div",null,{"className":" mx-auto px-5","children":["$","div",null,{"className":"py-2 text-center text-sm","children":["source code blog ini bisa ditemukan di link ini"," ",["$","a",null,{"href":"https://github.com/mukharomdev/mukharomdev.github.io","className":"underline hover:text-blue-600 duration-200 transition-colors","children":"available on GitHub"}],"."]}]}]}],["$","div",null,{"className":" mx-auto px-5","children":[["$","h2",null,{"className":"text-2xl md:text-4xl font-bold tracking-tight md:tracking-tighter leading-tight mb-20 mt-8 flex items-center","children":[["$","$Ld",null,{"href":"/","className":"hover:underline","children":"Blog"}],"."]}],["$","article",null,{"className":"mb-32","children":[[["$","h1",null,{"className":"text-3xl text-center md:text-5xl lg:text-6xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left","children":"Javascript String Metode dan Penggunaanya"}],["$","div",null,{"className":"hidden md:block md:mb-12","children":["$","div",null,{"className":"flex items-center","children":[["$","img",null,{"src":"/assets/blog/authors/mukharomdev.png","className":"w-12 h-12 rounded-full mr-4","alt":"mukharomdev"}],["$","div",null,{"className":"text-xl font-bold","children":"mukharomdev"}]]}]}],["$","div",null,{"className":"mb-8 md:mb-16 sm:mx-0","children":["$","div",null,{"className":"sm:mx-0","children":["$","$Le",null,{"src":"/assets/blog/javascript/javascript.png","alt":"Cover Image for Javascript String Metode dan Penggunaanya","className":"shadow-sm w-full sm:w-[400px] md:w-[600px] lg:w-[800px] max-h-[500px] mx-auto block","width":120,"height":80}]}]}],["$","div",null,{"className":"max-w-2xl mx-auto","children":[["$","div",null,{"className":"block md:hidden mb-6","children":["$","div",null,{"className":"flex items-center","children":[["$","img",null,{"src":"/assets/blog/authors/mukharomdev.png","className":"w-12 h-12 rounded-full mr-4","alt":"mukharomdev"}],["$","div",null,{"className":"text-xl font-bold","children":"mukharomdev"}]]}]}],["$","div",null,{"className":"mb-6 text-lg","children":["$","time",null,{"dateTime":"2025-03-14T21:49:26.530Z","children":"March\t14, 2025"}]}]]}]],["$","div",null,{"className":"max-w-2xl mx-auto","children":["$","div",null,{"className":"markdown-styles_markdown__ORfR8 prose prose-code ","dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}]]}]]}]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
6:null
7:null
b:[["$","title","0",{"children":"Javascript String Metode dan Penggunaanya | mukharomdev blog build with Markdown"}],["$","meta","1",{"name":"description","content":"Mini blog seputar pengalaman pribadi dunia pemrograman komputer"}],["$","meta","2",{"property":"og:title","content":"Javascript String Metode dan Penggunaanya | mukharomdev blog build with Markdown"}],["$","meta","3",{"property":"og:description","content":"Mini blog seputar pengalaman pribadi dunia pemrograman komputer"}],["$","meta","4",{"property":"og:image","content":"http://localhost:3000/assets/blog/javascript/javascript.png"}],["$","meta","5",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","6",{"name":"twitter:title","content":"Javascript String Metode dan Penggunaanya | mukharomdev blog build with Markdown"}],["$","meta","7",{"name":"twitter:description","content":"Mini blog seputar pengalaman pribadi dunia pemrograman komputer"}],["$","meta","8",{"name":"twitter:image","content":"http://localhost:3000/assets/blog/javascript/javascript.png"}],["$","link","9",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
