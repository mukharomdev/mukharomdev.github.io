1:"$Sreact.fragment"
2:I[7397,[],""]
3:I[8513,[],""]
5:I[3514,[],"OutletBoundary"]
8:I[3514,[],"ViewportBoundary"]
a:I[3514,[],"MetadataBoundary"]
c:I[1612,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/cc1b38a888361ae0.css","style"]
:HL["/_next/static/css/a218dfb468eefcdf.css","style"]
0:{"P":null,"b":"zB4SN0XwAB_SWMRVvwFhG","p":"","c":["","blog","react-usecallback"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","react-usecallback","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cc1b38a888361ae0.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased ","children":["$","div",null,{"className":"min-h-screen flex items-center justify-center bg-gray-100","children":["$","div",null,{"className":"container mx-auto p-4 bg-white rounded-lg shadow-lg","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"$undefined",[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","section",null,{"className":" prose lg:prose-3xl prose-img:rounded-xl prose-headings:underline prose-a:text-lime-600 prose-code:text-lime-500 mx-auto  ","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","react-usecallback","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4","$undefined",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a218dfb468eefcdf.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L5",null,{"children":["$L6","$L7",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","wKdbRIvYGOWsyzdnNDNRj",{"children":[["$","$L8",null,{"children":"$L9"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$La",null,{"children":"$Lb"}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
d:I[4184,["161","static/chunks/161-e1f62ef38275032d.js","953","static/chunks/app/blog/%5Bslug%5D/page-df444d222e09a7de.js"],""]
e:I[8161,["161","static/chunks/161-e1f62ef38275032d.js","953","static/chunks/app/blog/%5Bslug%5D/page-df444d222e09a7de.js"],"Image"]
f:T18a4,<p>useCallback adalah hook di React yang digunakan untuk <strong>memoize (menyimpan cache)</strong> fungsi, sehingga fungsi tersebut tidak dibuat ulang setiap kali komponen dirender ulang, kecuali jika dependency-nya berubah. Ini berguna untuk mengoptimalkan performa, terutama ketika:</p>
<ol>
<li><strong>Fungsi di-pass sebagai prop ke komponen anak</strong> yang menggunakan optimasi seperti React.memo.</li>
<li><strong>Fungsi menjadi dependency di hook lain</strong> (seperti useEffect).</li>
</ol>
<hr>
<h3><strong>1. Sintaks Dasar</strong></h3>
<pre><code class="language-javascript">const memoizedCallback = useCallback(
  () => { /* fungsi */ },
  [dependency1, dependency2] // Array dependency
);
</code></pre>
<hr>
<h3><strong>2. Contoh Penggunaan</strong></h3>
<h4>a. <strong>Mencegah Re-render Komponen Anak</strong></h4>
<pre><code class="language-jsx">import { useCallback, useState } from 'react';

// Komponen anak dengan React.memo
const ChildButton = React.memo(({ onClick }) => {
  console.log('Child dirender ulang');
  return &#x3C;button onClick={onClick}>Klik Saya&#x3C;/button>;
});

function Parent() {
  const [count, setCount] = useState(0);

  // Tanpa useCallback:
  // const handleClick = () => setCount(count + 1);

  // Dengan useCallback (fungsi tidak dibuat ulang jika &#x3C;code>count&#x3C;/code> tidak berubah):
  const handleClick = useCallback(() => {
    setCount(count + 1);
  }, [count]); // Recreate jika &#x3C;code>count&#x3C;/code> berubah

  return (
    &#x3C;div>
      &#x3C;p>Hitungan: {count}&#x3C;/p>
      &#x3C;ChildButton onClick={handleClick} />
    &#x3C;/div>
  );
}
</code></pre>
<h4>b. <strong>Digunakan dengan useEffect</strong></h4>
<pre><code class="language-jsx">function DataFetcher({ userId }) {
  const [data, setData] = useState(null);

  // Fungsi fetchData tidak dibuat ulang kecuali &#x3C;code>userId&#x3C;/code> berubah
  const fetchData = useCallback(async () => {
    const response = await fetch(&#x3C;code>https://api.example.com/users/${userId}&#x3C;/code>);
    setData(await response.json());
  }, [userId]); // Dependency: userId

  useEffect(() => {
    fetchData();
  }, [fetchData]); // Efek dijalankan hanya jika fetchData berubah

  return &#x3C;div>{data ? data.name : 'Loading...'}&#x3C;/div>;
}
</code></pre>
<hr>
<h3><strong>3. Kapan Menggunakan useCallback?</strong></h3>
<ul>
<li>Saat <strong>fungsi di-pass ke komponen anak</strong> yang dioptimasi dengan React.memo.</li>
<li>Ketika <strong>fungsi menjadi dependency di hook lain</strong> (misal: useEffect, useMemo).</li>
<li>Untuk <strong>mencegah re-render tidak perlu</strong> akibat perubahan referensi fungsi.</li>
</ul>
<hr>
<h3><strong>4. Perbedaan useCallback vs useMemo</strong></h3>
<div class="overflow-x-auto bg-lime-100"><table>
<thead>
<tr>
<th><strong>Kriteria</strong></th>
<th>useCallback</th>
<th>useMemo</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Return Value</strong></td>
<td>Memoize <strong>fungsi</strong></td>
<td>Memoize <strong>nilai hasil fungsi</strong></td>
</tr>
<tr>
<td><strong>Contoh</strong></td>
<td>useCallback(() => {}, [])</td>
<td>useMemo(() => 100, [])</td>
</tr>
<tr>
<td><strong>Penggunaan</strong></td>
<td>Untuk callback/event handler</td>
<td>Untuk nilai komputasi berat</td>
</tr>
</tbody>
</table></div>
<hr>
<h3><strong>5. Best Practices</strong></h3>
<ol>
<li>
<p><strong>Jangan Overuse</strong><br>
Gunakan hanya jika benar-benar diperlukan. Overuse bisa meningkatkan penggunaan memori.</p>
</li>
<li>
<p><strong>Perhatikan Dependency Array</strong><br>
Pastikan semua dependency yang digunakan di fungsi dimasukkan ke array:</p>
<pre><code class="language-javascript">// ❌ Salah (stale closure jika &#x3C;code>count&#x3C;/code> berubah)
const increment = useCallback(() => setCount(count + 1), []);

// ✅ Benar
const increment = useCallback(() => setCount(count + 1), [count]);
</code></pre>
</li>
<li>
<p><strong>Kombinasikan dengan React.memo</strong><br>
Untuk komponen anak yang menerima fungsi sebagai prop:</p>
<pre><code class="language-jsx">const Child = React.memo(({ onClick }) => (
  &#x3C;button onClick={onClick}>Child&#x3C;/button>
));
</code></pre>
</li>
</ol>
<hr>
<h3><strong>6. Contoh Kasus: Form Input dengan Validasi</strong></h3>
<pre><code class="language-jsx">function Form() {
  const [name, setName] = useState('');

  // Validasi tidak dibuat ulang kecuali dependency berubah
  const validateName = useCallback((value) => {
    return value.length >= 3;
  }, []); // Tidak ada dependency → fungsi tetap sama

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault();
      if (validateName(name)) {
        alert(&#x3C;code>Nama valid: ${name}&#x3C;/code>);
      }
    },
    [name, validateName] // Dependency: name dan validateName
  );

  return (
    &#x3C;form onSubmit={handleSubmit}>
      &#x3C;input
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      &#x3C;button type="submit">Submit&#x3C;/button>
    &#x3C;/form>
  );
}
</code></pre>
<hr>
<h3><strong>7. Kesalahan Umum</strong></h3>
<h4>a. <strong>Lupa Dependency Array</strong></h4>
<p>Fungsi akan selalu dibuat ulang:</p>
<pre><code class="language-javascript">const log = useCallback(() => console.log(count)); // ❌ Tidak ada dependency array
</code></pre>
<h4>b. <strong>Dependency Array Kosong</strong></h4>
<p>Menyebabkan <strong>stale closure</strong> (nilai state tidak update):</p>
<pre><code class="language-javascript">const increment = useCallback(() => setCount(count + 1), []); // ❌
</code></pre>
<h4>Solusi:</h4>
<p>Gunakan <strong>functional update</strong> untuk state yang bergantung pada nilai sebelumnya:</p>
<pre><code class="language-javascript">const increment = useCallback(() => {
  setCount(prev => prev + 1); // ✅ Tidak perlu dependency &#x3C;code>count&#x3C;/code>
}, []);
</code></pre>
<hr>
<h3><strong>Kesimpulan</strong></h3>
<p>Gunakan useCallback untuk:</p>
<ul>
<li>Mengoptimalkan komponen yang menerima <strong>fungsi sebagai prop</strong>.</li>
<li>Mencegah <strong>efek samping tidak perlu</strong> di useEffect.</li>
<li>Memastikan <strong>referensi fungsi tetap stabil</strong> selama dependency tidak berubah.</li>
</ul>
<p>Hindari penggunaannya jika tidak diperlukan untuk mencegah kompleksitas yang tidak perlu!</p>
4:["$","main",null,{"className":"container","children":[["$","div",null,{"className":"border-b dark:bg-slate-800 bg-neutral-50 border-neutral-200","children":["$","div",null,{"className":" mx-auto px-5","children":["$","div",null,{"className":"py-2 text-center text-sm","children":["source code blog ini bisa ditemukan di link ini"," ",["$","a",null,{"href":"https://github.com/mukharomdev/mukharomdev.github.io","className":"underline hover:text-blue-600 duration-200 transition-colors","children":"available on GitHub"}],"."]}]}]}],["$","div",null,{"className":" mx-auto px-5","children":[["$","h2",null,{"className":"text-2xl md:text-4xl font-bold tracking-tight md:tracking-tighter leading-tight mb-20 mt-8 flex items-center","children":[["$","$Ld",null,{"href":"/","className":"hover:underline","children":"Blog"}],"."]}],["$","article",null,{"className":"mb-32","children":[[["$","h1",null,{"className":"text-3xl text-center md:text-5xl lg:text-6xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left","children":" Penggunaan React useCallback"}],["$","div",null,{"className":"hidden md:block md:mb-12","children":["$","div",null,{"className":"flex items-center","children":[["$","img",null,{"src":"/assets/blog/authors/mukharomdev.png","className":"w-12 h-12 rounded-full mr-4","alt":"mukharomdev"}],["$","div",null,{"className":"text-xl font-bold","children":"mukharomdev"}]]}]}],["$","div",null,{"className":"mb-8 md:mb-16 sm:mx-0","children":["$","div",null,{"className":"sm:mx-0","children":["$","$Le",null,{"src":"/assets/blog/reacts/react1.png","alt":"Cover Image for  Penggunaan React useCallback","className":"shadow-sm w-full sm:w-[400px] md:w-[600px] lg:w-[800px] max-h-[500px] mx-auto block","width":120,"height":80}]}]}],["$","div",null,{"className":"max-w-2xl mx-auto","children":[["$","div",null,{"className":"block md:hidden mb-6","children":["$","div",null,{"className":"flex items-center","children":[["$","img",null,{"src":"/assets/blog/authors/mukharomdev.png","className":"w-12 h-12 rounded-full mr-4","alt":"mukharomdev"}],["$","div",null,{"className":"text-xl font-bold","children":"mukharomdev"}]]}]}],["$","div",null,{"className":"mb-6 text-lg","children":["$","time",null,{"dateTime":"2025-02-26T05:35:07.322Z","children":"February\t26, 2025"}]}]]}]],["$","div",null,{"className":"max-w-2xl mx-auto","children":["$","div",null,{"className":"markdown-styles_markdown__ORfR8 prose prose-code ","dangerouslySetInnerHTML":{"__html":"$f"}}]}]]}]]}]]}]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
6:null
7:null
b:[["$","title","0",{"children":" Penggunaan React useCallback | mukharomdev blog build with Markdown"}],["$","meta","1",{"name":"description","content":"Mini blog seputar pengalaman pribadi dunia pemrograman komputer"}],["$","meta","2",{"property":"og:title","content":" Penggunaan React useCallback | mukharomdev blog build with Markdown"}],["$","meta","3",{"property":"og:description","content":"Mini blog seputar pengalaman pribadi dunia pemrograman komputer"}],["$","meta","4",{"property":"og:image","content":"http://localhost:3000/assets/blog/reacts/react1.png"}],["$","meta","5",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","6",{"name":"twitter:title","content":" Penggunaan React useCallback | mukharomdev blog build with Markdown"}],["$","meta","7",{"name":"twitter:description","content":"Mini blog seputar pengalaman pribadi dunia pemrograman komputer"}],["$","meta","8",{"name":"twitter:image","content":"http://localhost:3000/assets/blog/reacts/react1.png"}],["$","link","9",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
